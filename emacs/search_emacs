(cd (getenv "HOME"))

;; Add load path of emacs lisps
(add-to-list 'load-path "~/.emacs.d/auto-install")
(add-to-list 'load-path "~/.emacs.d/elisps")

;; Emacs package system
(require 'package)
(package-initialize)

(set-default-font "VL ゴシック-10")
(tool-bar-mode 0)
(menu-bar-mode -1)
(set-scroll-bar-mode 'nil)

;; load environment value
(load-file (expand-file-name "~/.emacs.d/shellenv.el"))
(dolist (path (reverse (split-string (getenv "PATH") ":")))
  (add-to-list 'exec-path path))

(require 'dired-x)

;; for helm-gtags setting
(require 'helm-config)
(require 'helm-gtags)

;; configuration helm variable
(setq helm-idle-delay 0.2)
(setq helm-input-idle-delay 0)
(setq helm-candidate-number-limit 100)

(define-key helm-map (kbd "C-p")   'helm-previous-line)
(define-key helm-map (kbd "C-n")   'helm-next-line)
(define-key helm-map (kbd "C-M-n") 'helm-next-source)
(define-key helm-map (kbd "C-M-p") 'helm-previous-source)

;;;; GNU gtags
(add-hook 'helm-gtags-mode-hook
          '(lambda ()
             (local-set-key (kbd "M-t") 'helm-gtags-find-tag)
             (local-set-key (kbd "M-r") 'helm-gtags-find-rtag)
             (local-set-key (kbd "M-s") 'helm-gtags-find-symbol)
             (local-set-key (kbd "C-t") 'helm-gtags-pop-stack)))

;;; hook for gtags
(add-hook 'c-mode-common-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode 'helm-gtags-mode)

;; disable vc-mode
(setq vc-handled-backends ())

;; which-func
(require 'which-func)
(setq which-func-modes (append which-func-modes '(cperl-mode)))
(set-face-foreground 'which-func "chocolate4")
(set-face-bold-p 'which-func t)
(which-func-mode t)

;; naming of same name file
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

(iswitchb-mode)
(setq iswitchb-buffer-ignore '("\\*.+"))
(add-hook 'iswitchb-define-mode-map-hook 'my/iswitchb-my-keys)

(defun my/iswitchb-my-keys ()
  (define-key iswitchb-mode-map [right] 'iswitchb-next-match)
  (define-key iswitchb-mode-map [left] 'iswitchb-prev-match)
  (define-key iswitchb-mode-map (kbd "C-f") 'iswitchb-next-match)
  (define-key iswitchb-mode-map (kbd " ") 'iswitchb-next-match)
  (define-key iswitchb-mode-map (kbd "C-b") 'iswitchb-prev-match))


;; key bindings
(global-set-key (kbd "C-M-o") 'other-window)

;; helm in dired
(defvar my/helm-c-current-directory-source
  `((name . "Current Directory Files")
    (candidates . (lambda ()
                    (with-helm-current-buffer
                      (let ((dirs (directory-files (helm-c-current-directory)))
                            (filter (lambda (d) (string-match "^\.\.?$" d))))
                        (remove-if filter dirs)))))
    (action . (("Open File" . helm-c-find-file-or-marked)
               ("Open File at New Tab(elscreen)"
                . (lambda (candidate) (elscreen-find-file candidate)))))))

(defun my/helm-find-file-current-directory ()
  (interactive)
  (let ((curbuf (current-buffer))
        (orig-major major-mode))
    (if (helm-other-buffer 'my/helm-c-current-directory-source "*helm-dired*")
        (and (eq orig-major 'dired-mode) (kill-buffer curbuf)))))

(global-set-key (kbd "C-x C-p") 'my/helm-find-file-current-directory)
